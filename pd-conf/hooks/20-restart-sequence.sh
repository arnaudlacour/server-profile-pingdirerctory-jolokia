#!/usr/bin/env sh
#
# Ping Identity DevOps - Docker Build Hooks
#
#- This hook is called when the container has been built in a prior startup
#- and a configuration has been found.
#
${VERBOSE} && set -x

# shellcheck source=../../../../pingcommon/opt/staging/hooks/pingcommon.lib.sh
. "${HOOKS_DIR}/pingcommon.lib.sh"

# shellcheck source=../../../../pingdatacommon/opt/staging/hooks/pingdata.lib.sh
. "${HOOKS_DIR}/pingdata.lib.sh"

echo "Processing the container restart sequence"

#
# Generate the jvm options
#
jvmOptions=$( getJvmOptions )
_returnCode=${?}
if test ${_returnCode} -ne 0 ; then
    echo_red "${jvmOptions}"
    container_failure 183 "Invalid JVM options"
fi

# Before running any ds tools, remove java.properties and re-create it
# for the current JVM.
echo "Re-generating java.properties for current JVM"
# re-initialize the current java.properties.  a backup in same location will be created.
${SERVER_ROOT_DIR}/bin/dsjavaproperties --initialize ${jvmOptions}

# if this hook is provided it can be executed early on
run_hook "21-update-server-profile.sh"

echo_green "----- Resuming hook: ${0}"

#
# Build the password file options
#
buildPasswordFileOptions

certificateOptions=$( getCertificateOptions )
_returnCode=${?}
if test ${_returnCode} -ne 0 ; then
    echo_red "${certificateOptions}"
    container_failure 183 "Invalid certificate options"
fi


#
# If we are RESTARTing the server, we will need to copy any
# keystore/truststore certificate and pin files to the
# pd.profile if they aren't already set.  This implies that
# the server used those keystore/trustore files initially to
# setup the server. The exception to this rule is when the profile
# is using the --generateSelfSignedCertificate argument. When
# that argument is used, including the keystore or truststore in the profile
# will cause an exception when the server is being set up.
# Instead just use the --generateSelfSignedCertificate argument
# as-is; replace-profile will already maintain the previous server
# keystore and truststore when it can find them, so
# --generateSelfSignedCertificate will not change the certificate
# that the server is using.
_generatingSelfSignedCert=false
# Check for the argument in an existing setup-arguments.txt
test -f "${_setupArgumentsFile}" && contains_ignore_case "$(cat ${_setupArgumentsFile})" "--generateSelfSignedCertificate" && \
    _generatingSelfSignedCert=true
# If there is no existing setup-arguments.txt file now, then check
# the certificate options that will be included in the generated
# setup-arguments.txt file.
! test -f "${_setupArgumentsFile}" && contains_ignore_case "${certificateOptions}" "--generateSelfSignedCertificate" && \
    _generatingSelfSignedCert=true

if test "${_generatingSelfSignedCert}" = "false"; then
    echo "Copying existing certificate files from existing install..."
    for _certFile in keystore keystore.p12 truststore truststore.p12 ; do
        echo "  Checking for certificate ${_certFile}..."
        if test -f "${SERVER_ROOT_DIR}/config/${_certFile}" -a ! -f "${PD_PROFILE}/server-root/pre-setup/config/${_certFile}" ; then
            echo "    ${SERVER_ROOT_DIR}/config/${_certFile} ==>"
            echo "      ${PD_PROFILE}/server-root/pre-setup/config/${_certFile}"

            cp -f "${SERVER_ROOT_DIR}/config/${_certFile}" \
            "${PD_PROFILE}/server-root/pre-setup/config/${_certFile}"
        else
            echo "    ... not found in existing install or was found in pd.profile"
        fi
        echo ""
    done

    echo "Copying existing certificate pin files from existing install..."
    for _pinFile in keystore.pin truststore.pin ; do
        echo "  Checking for certificate pin ${_pinFile}..."
        if test -f "${SERVER_ROOT_DIR}/config/${_pinFile}" -a ! -f "${PD_PROFILE}/server-root/pre-setup/config/${_pinFile}" ; then
            # An attempt will be made to decrypt the file using the current server encryption-settings, however if one was
            # provided in clear to start with, it probably won't be encrypted.  This is caused by initial use of
            # generateSelfSignedCert
            "${SERVER_ROOT_DIR}"/bin/encrypt-file --decrypt \
                --input-file "${SERVER_ROOT_DIR}/config/${_pinFile}" \
                --output-file "${PD_PROFILE}/server-root/pre-setup/config/${_pinFile}" 2> /dev/null

            _returnCode=${?}
            if test ${_returnCode} -ne 0 ; then
                cp "${SERVER_ROOT_DIR}/config/${_pinFile}" "${PD_PROFILE}/server-root/pre-setup/config/${_pinFile}"
            else
                echo "  Successfully decrypted ${_pinFile}.  Most likely originally generated by self-signed certificate on setup"
            fi

            echo "    ${SERVER_ROOT_DIR}/config/${_pinFile} ==>"
            echo "      ${PD_PROFILE}/server-root/pre-setup/config/${_pinFile}"
        else
            echo "  ... not found in existing install or was found in pd.profile"
        fi
        echo ""
    done
fi

#
# Generate the encryption options
#
encryptionOption=$( getEncryptionOption )
_returnCode=${?}
if test ${_returnCode} -ne 0 ; then
    echo_red "${encryptionOption}"
    container_failure 183 "Invalid encryption option"
fi

export certificateOptions encryptionOption jvmOptions

echo "Checking license file..."
_currentLicense="${LICENSE_DIR}/${LICENSE_FILE_NAME}"
_pdProfileLicense="${PD_PROFILE}/server-root/pre-setup/${LICENSE_FILE_NAME}"

if test ! -f "${_pdProfileLicense}" ; then
    echo "  Copying in license from existing install."
    echo "    ${_currentLicense} ==> "
    echo "      ${_pdProfileLicense}"
    cp -f "${_currentLicense}" "${_pdProfileLicense}"
else
    echo "Using new license from ${_pdProfileLicense}"
fi

# If a setup-arguments.txt file isn't found, then generate
_isSetupArgumentsGenerated=false
if test ! -f "${_setupArgumentsFile}"; then
    generateSetupArguments
    _isSetupArgumentsGenerated=true
fi

# Copy the manage-profile.log to a previous version to keep size down due to repeated fail attempts
mv "${SERVER_ROOT_DIR}/logs/tools/manage-profile.log" "${SERVER_ROOT_DIR}/logs/tools/manage-profile.log.prev"

case "$( toLower "${PD_REBUILD_ON_RESTART}")" in
    yes|true)
        echo "Forcing replace-profile due to PD_REBUILD_ON_RESTART=${PD_REBUILD_ON_RESTART} ..."
        _replaceFullProfile=" --replaceFullProfile"
        ;;
    *)
        echo "Merging changes from new server profile..."
        ;;
esac

_manage_profile_cmd="${SERVER_BITS_DIR}/bin/manage-profile replace-profile \
        --serverRoot ${SERVER_ROOT_DIR} \
        --profile ${PD_PROFILE} \
        --useEnvironmentVariables \
        ${_replaceFullProfile}"

echo "  ${_manage_profile_cmd}"

${_manage_profile_cmd}
_manageProfileRC=$?

# Delete the generated setup-arguments.txt file from the profile
if test "${_isSetupArgumentsGenerated}" = "true"; then
    rm "${_setupArgumentsFile}"
fi

if test ${_manageProfileRC} -ne 0 ; then
    echo_red "*****"
    echo_red "An error occurred during mange-profile replace-profile."
    echo_red "${SERVER_ROOT_DIR}/logs/tools/manage-profile.log listed below."
    echo_red "*****"

    cat "${SERVER_ROOT_DIR}/logs/tools/manage-profile.log"

    container_failure 20 "Resolve the issues with your server-profile"
fi

